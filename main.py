from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.command import Command
from aiogram import Bot, Dispatcher, types

import requests
import json
import asyncio
from time import sleep
import multiprocessing

Private = False  # False - –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º | True - –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º

#### DATA ####
DataFile = 'data.json'  # –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
Config = json.load(open(DataFile))  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Config

#### TWITCH ####
TOKEN = Config["api"]['token']  # –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
client_secret = Config["api"]['client_secret']  # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
client_id = Config["api"]["client_id"]  # ID –∫–ª–∏–µ–Ω—Ç–∞

#### TG BOT Config ####
owners_id = []  # ID –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞ (–£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è, –µ—Å–ª–∏ Private == True)
bot = Bot(token=Config["tg-bot"]["token"])  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
dp = Dispatcher(bot=bot)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä


def DataUpdate(data, file: str = DataFile) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""

    with open(file, 'w') as f:
        json.dump(data, f)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–∏ÃÜ–ª —Å –¥–∞–Ω–Ω—ã–º–∏


def GetToken() -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ç–≤–∏—á-–∞–ø–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω"""

    response = requests.post(
        'https://id.twitch.tv/oauth2/token',
        data={
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': 'client_credentials'
        }
    )  # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

    # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN
    if response.status_code == 200:
        response_json = response.json()
        TOKEN = response_json['access_token']

    return TOKEN  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω


def UpdateToken() -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ç–≤–∏—á-–∞–ø–∏"""

    global TOKEN  # –¥–µ–ª–∞–µ–º TOKEN –≥–ª–æ–±–∞–ª—å–Ω–æ–∏ÃÜ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–∏ÃÜ

    Config["api"]["token"] = TOKEN = GetToken()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    DataUpdate(Config)


def GetButton(url: str) -> InlineKeyboardMarkup:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='–°–ú–û–¢–†–ï–¢–¨ –°–¢–†–ò–ú', url=url)  # –ö–Ω–æ–ø–∫–∞
        ]
    ])  # —Å–æ–∑–¥–∞–µ–º —Å–∞–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    return keyboard


def is_owner(message):
    id = message.chat.id
    return True if (Private and id in owners_id) or (Private == False) else False


def is_valid(channel: str):
    while (attempts := 0) < 3:
        try:
            response = requests.get(f"https://api.twitch.tv/helix/streams?user_login={channel}",
                                    headers={
                                        'Client-ID': client_id,
                                        'Authorization': 'Bearer ' + TOKEN
                                    }
                                    )  # –ó–∞–ø—Ä–æ—Å –∫ —Ç–≤–∏—á-–∞–ø–∏ (—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–¥–µ—Ç –ª–∏ —Å—Ç—Ä–∏–º)

            break
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        except UnboundLocalError:
            UpdateToken()

        attempts += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

    # –ï—Å–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (400 - –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
    if response.status_code == 400:
        return False
    else:
        return True


def stream_status(channel: str) -> bool and list:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ (—Å—Ç—Ä–∏–º–∏—Ç –∏–ª–∏ –Ω–µ—Ç)"""

    status = bool(False)

    while (attempts := 0) < 3:
        try:
            response = requests.get(f"https://api.twitch.tv/helix/streams?user_login={channel}",
                                    headers={
                                        'Client-ID': client_id,
                                        'Authorization': 'Bearer ' + TOKEN
                                    }
                                    )  # –ó–∞–ø—Ä–æ—Å –∫ —Ç–≤–∏—á-–∞–ø–∏ (—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–¥–µ—Ç –ª–∏ —Å—Ç—Ä–∏–º)

            break
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        except UnboundLocalError:
            UpdateToken()

        attempts += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç (200 - —É—Å–ø–µ—à–Ω—ã–∏ÃÜ –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω)
    if response.status_code == 200:
        data = response.json()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        if len(data['data']) > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if not status:
                # –î–µ–π—Å—Ç–≤–∏—è –ø–æ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∏–º–∞
                ...
                #
            status = True
        else:
            if status:
                # –î–µ–π—Å—Ç–≤–∏—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å—Ç—Ä–∏–º–∞
                ...
                #
            status = False

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞ –∏ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å—Ç—Ä–∏–º –∏–¥–µ—Ç
        return status, data['data'][0] if status == True else None

    # –ï—Å–ª–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (400 - –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
    elif response.status_code == 400:
        return NameError('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞')
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª (401 - –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    elif response.status_code == 401:
        UpdateToken()  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    else:
        return Warning('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')


@dp.message(Command('add_sub'))
async def add_sub(message: types.Message):
    if is_owner(message):
        channel = str(message.text[9:])
        try:
            if channel == "":
                await message.reply(f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞!")
                return
            elif not is_valid(channel):
                await message.reply(f"–î–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–µ—Ç!")
            elif channel in Config["users"][str(message.chat.id)]:
                await message.reply(f"–î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É–∂–µ –≤ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö!")
            else:
                try:
                    Config["users"][str(message.chat.id)].append(message.text[9:])
                    DataUpdate(Config)

                    await message.reply(f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                except Exception as e:
                    await message.reply(f"sub adding error! {e}")
        except KeyError:
            Config["users"][str(message.chat.id)] = list()
            await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π!")


@dp.message(Command('rm_sub'))
async def rm_sub(message: types.Message):
    if is_owner(message):
        channel = str(message.text[8:])
        try:
            if channel == "":
                await message.reply(f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞!")
                return
            elif not channel in Config["users"][str(message.chat.id)]:
                await message.reply(f"–î–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫!")
            else:
                try:
                    Config["users"][str(message.chat.id)].remove(f"{message.text[8:]}")
                    DataUpdate(Config)

                    await message.reply(f"–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
                except Exception as error:
                    await message.reply(f"sub [{message.text[8:]}] removing error! {error}")
        except KeyError:
            Config["users"][str(message.chat.id)] = list()
            await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π!")


@dp.message(Command('list_sub'))
async def list_sub(message: types.Message):
    if is_owner(message):
        try:
            lst = Config["users"][str(message.chat.id)]

            if lst == []:
                await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—É—Å—Ç!")
            else:
                await message.reply("\n".join(lst))
        except KeyError:
            Config["users"][str(message.chat.id)] = list()
            await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π!")


async def tg_bot():
    print("TG Bot Started!")
    await dp.start_polling(bot)


async def twitch_watch():
    online = list()
    print("Twitch Sendler Sarted!")
    while True:
        Config = json.load(open(DataFile))
        for user_id, subs in Config["users"].items():
            user_id = int(user_id)
            if not subs == []:
                for sub in subs:

                    status, info = stream_status(sub)

                    if not (info is None) and sub not in online:
                        keyboard = GetButton(f"https://twitch.tv/{info['user_login']}")
                        text = f'üî∏<b><i>{info["user_name"]}</i></b> —Å—Ç—Ä–∏–º–∏—Çüî∏\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∞:</b> {info["title"]}\n<b>–¢–µ–º–∞:</b> {"–û–±—â–µ–Ω–∏–µ" if info["game_name"] == "Just Chatting" else info["game_name"]}'

                        await bot.send_message(chat_id=user_id, text=text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)

                        online.append(sub)
                    elif info is None and sub in online:
                        online.remove(sub)
            else:
                continue

        await asyncio.sleep(1 * 60)


async def main():
    await asyncio.gather(twitch_watch(), tg_bot())
    exit()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ü–æ–∫–∞!")
        exit()
